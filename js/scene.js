import { connectToPeer, sendGameMessage, closeConnection } from './peer.js';
import { updateGameState } from './main.js';

const CACHE_MAX_SIZE = 1000;

// // Tilemap 1
const TILEMAP_CONFIG = {
  TILE_MAP_PATH: 'assets/images/environment/roguelikeSheet_transparent.png',
  TILE_SIZE: 16,
  TILE_ROWS: 57,
  TILE_COLUMNS: 31,
  TILE_PADDING: 1,
  SCALE: 2,
  DEFAULT_TILE: 6
};

// Tilemap 2
// const TILEMAP_CONFIG = {
//   TILE_MAP_PATH: 'assets/images/environment/spr_tileset_sunnysideworld_16px.png',
//   TILE_SIZE: 16,
//   TILE_ROWS: 57,
//   TILE_COLUMNS: 31,
//   TILE_PADDING: 0,
//   SCALE: 2,
//   DEFAULT_TILE: 6
// };
  
class Scene {
  constructor(width, height) {
    this.width = width;
    this.height = height;
    this.layers = [];
    this.tilemapSprites = new Map();
    this.tileCache = new Map();
    this.cacheSize = 0;
    this.viewport = {
      x: 0,
      y: 0,
      width: 0,
      height: 0
    };
    this.isLoaded = false; 
  }
  
    // Load tilemap sprite sheet
    async loadTilemap(imagePath) {
        return new Promise((resolve, reject) => {
          const img = new Image();
          img.onload = () => {
            const canvas = document.createElement('canvas');
            canvas.width = TILEMAP_CONFIG.TILE_SIZE;
            canvas.height = TILEMAP_CONFIG.TILE_SIZE;
            const ctx = canvas.getContext('2d');
            
            // Calculate total tiles in tilemap
            const totalRows = Math.floor(img.height / (TILEMAP_CONFIG.TILE_SIZE + TILEMAP_CONFIG.TILE_PADDING));
            const totalCols = Math.floor(img.width / (TILEMAP_CONFIG.TILE_SIZE + TILEMAP_CONFIG.TILE_PADDING));
            
            // Slice tilemap into individual sprites
            for (let y = 0; y < totalRows; y++) {
              for (let x = 0; x < totalCols; x++) {
                const tileIndex = y * TILEMAP_CONFIG.TILE_ROWS + x;
                
                ctx.clearRect(0, 0, TILEMAP_CONFIG.TILE_SIZE, TILEMAP_CONFIG.TILE_SIZE);
                
                // Calculate source coordinates with padding
                const sourceX = x * (TILEMAP_CONFIG.TILE_SIZE + TILEMAP_CONFIG.TILE_PADDING);
                const sourceY = y * (TILEMAP_CONFIG.TILE_SIZE + TILEMAP_CONFIG.TILE_PADDING);
                
                ctx.drawImage(img, 
                  sourceX, sourceY, 
                  TILEMAP_CONFIG.TILE_SIZE, TILEMAP_CONFIG.TILE_SIZE,
                  0, 0, 
                  TILEMAP_CONFIG.TILE_SIZE, TILEMAP_CONFIG.TILE_SIZE
                );
                
                const tileCanvas = document.createElement('canvas');
                tileCanvas.width = TILEMAP_CONFIG.TILE_SIZE;
                tileCanvas.height = TILEMAP_CONFIG.TILE_SIZE;
                tileCanvas.getContext('2d').drawImage(canvas, 0, 0);
                
                this.tilemapSprites.set(tileIndex, tileCanvas);
              }
            }
            resolve();
          };
          img.onerror = reject;
          img.src = imagePath;
        });
    }

    loadFromData(sceneData) {
      // Reset dimensions if needed
      if (sceneData.width !== this.width || sceneData.height !== this.height) {
        this.width = sceneData.width;
        this.height = sceneData.height;
      }
      
      // Handle multi-layer format
      if (sceneData.layers) {
        this.layers = sceneData.layers.map(layer => ({
          name: layer.name,
          tiles: layer.tiles.map(row => [...row])
        }));
      } else {
        // Single layer format - convert to layers format
        this.layers = [{
          name: 'Layer 1',
          tiles: sceneData.tiles.map(row => [...row])
        }];
      }
      
      this.isLoaded = true; // Add this line
    }

    async loadFromFile(jsonPath) {
      try {
        const response = await fetch(jsonPath);
        const sceneData = await response.json();
        this.loadFromData(sceneData);
      } catch (err) {
        console.error('Error loading scene file:', err);
        throw err;
      }
    }

    cleanCache() {
      if (this.cacheSize > CACHE_MAX_SIZE) {
        const entriesToRemove = Math.floor(CACHE_MAX_SIZE * 0.2); // Remove 20% of cache
        let count = 0;
        for (const key of this.tileCache.keys()) {
          this.tileCache.delete(key);
          count++;
          if (count >= entriesToRemove) break;
        }
        this.cacheSize = this.tileCache.size;
      }
    }

    setViewport(x, y, width, height) {
      this.viewport = { x, y, width, height };
    }
  
    render(ctx) {
      if (!ctx) return;
  
      ctx.imageSmoothingEnabled = false;
      const scaledTileSize = TILEMAP_CONFIG.TILE_SIZE * TILEMAP_CONFIG.SCALE;
      
      // Calculate visible range
      const startTileX = Math.max(0, Math.floor(this.viewport.x / scaledTileSize));
      const startTileY = Math.max(0, Math.floor(this.viewport.y / scaledTileSize));
      const endTileX = Math.min(this.width, startTileX + Math.ceil(ctx.canvas.width / scaledTileSize) + 1);
      const endTileY = Math.min(this.height, startTileY + Math.ceil(ctx.canvas.height / scaledTileSize) + 1);
  
      // Draw visible tiles using cache
      this.layers.forEach(layer => {
        for (let y = startTileY; y < endTileY; y++) {
          for (let x = startTileX; x < endTileX; x++) {
            const tileType = layer.tiles[y][x];
            if (tileType === TILEMAP_CONFIG.DEFAULT_TILE) continue;
  
            const cacheKey = `${tileType}_${scaledTileSize}`;
            let renderedTile = this.tileCache.get(cacheKey);
  
            if (!renderedTile) {
              const sprite = this.tilemapSprites.get(tileType);
              if (!sprite) continue;
  
              // Create and cache scaled tile
              const tileCanvas = document.createElement('canvas');
              tileCanvas.width = scaledTileSize;
              tileCanvas.height = scaledTileSize;
              const tileCtx = tileCanvas.getContext('2d');
              tileCtx.imageSmoothingEnabled = false;
              tileCtx.drawImage(sprite, 0, 0, scaledTileSize, scaledTileSize);
              
              this.tileCache.set(cacheKey, tileCanvas);
              renderedTile = tileCanvas;
            }
  
            const screenX = x * scaledTileSize - this.viewport.x;
            const screenY = y * scaledTileSize - this.viewport.y;
            ctx.drawImage(renderedTile, screenX, screenY);
          }
        }
      });
    }
  }
  
  
  // Example scene data format
  const exampleScene = 
  {
    "width": 32,
    "height": 32,
    "layers": [
      {
        "name": "Layer 1",
        "tiles": [
            [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   2,   3,   3,   3,   3,   4,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,  59,   1,   1,   1,   1,  61,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,  59,   1,   1,   1,   1,  61,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,  59,   1,   1,   1,   0,  61,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,  59,   0,   0,   0,   0,  61,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,  59,   0,   0,   0,   0, 114,   3,   3,   3,   3,   3,   3,   3,   3,   3,   4,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,  59,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  61,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,  59,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  61,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,  59,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  61,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,  59,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  61,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5, 116, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 118,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5],
        [  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5]
        ]
      },
  {
        "name": "Layer 2",
        "tiles": [
            [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 520, 521, 522, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286,  19, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521,  63,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [ 63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [635, 635, 635, 635, 635, 635, 635, 635, 635, 635, 635, 635, 635, 635, 635, 635, 635, 635, 635,  63,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286],
        [286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 577,  63, 579, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286]
        ]
      },
  {
        "name": "Layer 3",
        "tiles": [
            [588,   6,   6, 541,   6,   6,   6,   6,   6,   6, 542, 588,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [645,   6,   6,   6,   6,   6,   6, 537,   6,   6,   6, 645,   6,   6,   6,   6,   6,   6,   6,   6, 588,   6,   6,   6,   6,   6,   6,   6,   6,   6, 541,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6, 588,   6,   6, 542,   6, 645,   6,   6,   6,   6,   6,   6,   6,   6, 537,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6, 541,   6,   6,   6,   6,   6, 645,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6, 537,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6, 588,   6],
        [541,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6, 645,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6, 541,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6, 542,   6],
        [  6, 542,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6, 588,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6, 645,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [ 20,   6,   6,   6, 537,   6,   6,   6,   6,   6,   6,   6,   6,   6, 588,   6,   6,   6,  21,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6, 645,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6, 588,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6, 645,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6, 588,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [542,   6,   6,   6,   6,   6,   6,   6, 541,   6,   6,   6,   6,   6,   6,   6,   6, 645,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6, 537,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6, 542,   6,   6, 872, 873, 873, 874,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6, 541,   6,   6,   6,   6,   6, 588,   6,   6,   6,   6, 872, 873, 873, 874,  18,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6, 645,   6,   6,   6,   6, 869, 868, 868, 871,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6, 541,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6, 588,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6, 588,   6],
        [  6,   6, 645,   6,   6,   6,   6,   6,   6, 541,   6,   6,   6,   6, 588,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6, 645,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6, 645,   6, 537,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6]
        ]
      },
  {
        "name": "Layer 4",
        "tiles": [
            [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6, 1217, 1218,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6, 1217, 1391, 1279, 1218,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6, 1274, 1654, 1279, 1275,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6, 1333,   6,   6, 1334,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6, 558,   6,   6, 558,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6, 484, 485,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6],
        [  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6]
        ]
      }
    ]
  };
  
  // Scene manager for handling multiple scenes
  class SceneManager {
    constructor() {
      this.scenes = new Map();
      this.currentScene = null;
    }
  
    async createScene(id, width, height) {
      const scene = new Scene(width, height);
      this.scenes.set(id, scene);
      return scene;
    }
  
    loadScene(id) {
      this.currentScene = this.scenes.get(id);
      return this.currentScene;
    }
  
    getCurrentScene() {
      return this.currentScene;
    }
  }
  
  // Export for use in other files
  const sceneManager = new SceneManager();

  export const loadGameScene = async (sceneId) => {
    try {
      const scene = await sceneManager.createScene(sceneId, 64, 128);
      
      // Load tilemap first
      await scene.loadTilemap(TILEMAP_CONFIG.TILE_MAP_PATH);
      
      // Load scene data
      await scene.loadFromFile(`assets/scenes/${sceneId}.json`);
      
      if (scene.isLoaded) {
        updateGameState({
          currentScene: scene
        });
        console.log('Scene loaded successfully');
      } else {
        throw new Error('Scene failed to load completely');
      }
  
    } catch (err) {
      console.error('Error loading scene:', err);
      throw err;
    }
  };

  export {
    Scene,
    SceneManager,
    TILEMAP_CONFIG
  };